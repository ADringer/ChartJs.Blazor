@page "/fetchdata"
@using WebCore.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.MixedChart
@using ChartJs.Blazor.ChartJS.LineChart
@inject WeatherForecastService ForecastService

<h2>Line Chart</h2>
<ChartJsLineChart TData="int" @ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}

@functions
{
    LineChartConfig lineChartConfig;
    ChartJsLineChart lineChartJs;

    WeatherForecast[] forecasts;

    protected override async Task OnInitAsync()
    {
        lineChartConfig = new LineChartConfig
        {
            CanvasId = "myFirstLineChart",
            Options = new LineChartOptions
            {
                Text = "Sample chart from Blazor",
                Display = true,
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new Labels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Point,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<Axis>
            {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                    },
                    yAxes = new List<Axis>
            {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temperatur"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            },
            Data = new LineChartData
            {
                Labels = new List<string>()
            }
        };

        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        var intSet = new LineChartDataset<int>();
        var stringSet = new LineChartDataset<string>();

        var dataOfIntSet = new List<int>()
        {
            1, 2, 3
        };

        var dataOfStringSet = new List<string>()
        {
            "1", "2", "3"
        };

        intSet.Data = dataOfIntSet.AsReadOnly();
        stringSet.Data = dataOfStringSet.AsReadOnly();

        var readonlySets = new List<LineChartDataset<object>>
        {
            intSet,
            stringSet
        }.AsReadOnly();

        lineChartConfig.Data.Datasets = readonlySets;

        //lineChartConfig.Data.Labels.AddRange(forecasts.Select(p => p.Date.ToShortDateString()));
        //lineChartConfig.Data.Datasets[0].Data.AddRange(forecasts.Select(p => p.TemperatureC));
    }
}
