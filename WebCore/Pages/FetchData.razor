@page "/fetchdata"
@using WebCore.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.Util.Color
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.LineChart.Wrappers
@inject WeatherForecastService ForecastService

<h2>Line Chart</h2>
<div class="fetchDataContainer">
    <ChartJsLineChart @ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}

@functions
{
    LineChartConfig lineChartConfig;
    ChartJsLineChart lineChartJs;

    WeatherForecast[] forecasts;

    protected override async Task OnInitAsync()
    {
        lineChartConfig = new LineChartConfig
        {
            CanvasId = "myFirstLineChart",
            Options = new LineChartOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new Labels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Point,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<Axis>
                {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                    },
                    yAxes = new List<Axis>
                {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temperatur"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        var intSet = new LineChartDataset<ValueWrapper<int>>() // object
        {
            BackgroundColor = ColorUtil.ColorString(0, 255, 0, 1.0),
            BorderColor = ColorUtil.ColorString(0, 0, 255, 1.0),
            Label = "Temperatur in C",
            Fill = false,
            PointBackgroundColor = ColorUtil.RandomColorString(),
            BorderWidth = 1,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        var doubleSet = new LineChartDataset<ValueWrapper<double>>() // object
        {
            BackgroundColor = "#63ff84",
            BorderColor = "#63ff84",
            Label = "Temperatur in 1/F",
            Fill = false,
            BorderWidth = 1,
            PointRadius = 4,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.True
        };

        lineChartConfig.Data.Labels.AddRange(forecasts.Select(p => p.Date.ToShortDateString()));
        intSet.AddRange(forecasts.Select(p => p.TemperatureC).Wrap());
        doubleSet.AddRange(forecasts.Select(p => (1d / p.TemperatureF)).Wrap());

        lineChartConfig.Data.Datasets.Add(intSet);
        lineChartConfig.Data.Datasets.Add(doubleSet);
    }
}
