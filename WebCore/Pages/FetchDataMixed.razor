@page "/fetchdataMixed"
@using WebCore.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@inject WeatherForecastService ForecastService

<h2>Line Chart</h2>
<ChartJsLineChartMixed @ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}

@functions
{
        LineChartConfigMixed lineChartConfig;
        ChartJsLineChartMixed lineChartJs;

        WeatherForecast[] forecasts;

    protected override async Task OnInitAsync()
    {
        lineChartConfig = new LineChartConfigMixed
        {
            CanvasId = "myFirstLineChart",
            Options = new LineChartOptions
            {
                Text = "Sample chart from Blazor",
                Display = true,
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new Labels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Dataset,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<Axis>
                {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                    },
                    yAxes = new List<Axis>
                {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temperatur"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Nearest
                }
            },
            Data = new LineChartData<object>
            {
                Labels = new List<string>(),
                Datasets = new List<LineChartDataset<object>>
            {
                    new LineChartDataset<object>
                    {
                        BackgroundColor = "#ff6384",
                        BorderColor = "#ff6384",
                        Label = "Temperatur in C°",
                        Data = new List<object>(),
                        Fill = false,
                        BorderWidth = 2,
                        PointRadius = 3,
                        PointBorderWidth = 1,
                        SteppedLine = SteppedLine.False
                    }
                }
            }
        };

        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        lineChartConfig.Data.Labels.AddRange(forecasts.Select(p => p.Date.ToShortDateString()).Concat(new[] { "new1", "new2" }));
        lineChartConfig.Data.Datasets[0].Data.AddRange(forecasts.Select(p => (object)p.TemperatureC).Concat(new object[] { "a", 'b' }));
    }
}
