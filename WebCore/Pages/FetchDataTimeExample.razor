@page "/fetchdataTimeExample"
@using WebCore.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@inject WeatherForecastService ForecastService

<h2>Line Chart</h2>
<ChartJsLineChart @ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}

@functions
{
    LineChartConfig lineChartConfig;
    ChartJsLineChart lineChartJs;

    WeatherForecast[] forecasts;

    protected override async Task OnInitAsync()
    {
        lineChartConfig = new LineChartConfig
        {
            CanvasId = "timeChartExample",
            Options = new LineChartOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new Labels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {

                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm",
                                DisplayFormats = new Dictionary<TimeMeasurement, string>()
                                {
                                    { TimeMeasurement.Hour, "HH:00" }
                                }
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, 2);

        var tempDataSet = new LineChartDataset<TimeTupel<int>>
        {
            BackgroundColor = "#ff6384",
            BorderColor = "#ff6384",
            Label = "Temperatur in C°",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        tempDataSet.AddRange(forecasts.Select(p => new TimeTupel<int>(p.Date, p.TemperatureC)));
        lineChartConfig.Data.Datasets.Add(tempDataSet);
    }
}
