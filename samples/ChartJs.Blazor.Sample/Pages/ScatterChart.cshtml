@page "/ScatterChart"

@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Utils
@using ChartJs.Blazor.ChartJS.ScatterChart
@using Newtonsoft.Json

<h2>Scatter Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>

<ChartJsScatterChart ref="scatterChartJs" Config="@scatterChartConfig" Width="600" Height="300"/>

<DataSetDisplay DataSets="@scatterChartConfig.Data.Datasets" Width="600" Height="300"/>

@functions{


    ScatterChartConfig scatterChartConfig { get; set; }
    ChartJsScatterChart scatterChartJs;

    public string datasetStr => JsonConvert.SerializeObject(scatterChartConfig.Data.Datasets, Formatting.Indented, new JsonSerializerSettings()
    {
        NullValueHandling = NullValueHandling.Ignore
    });

    protected override void OnInit()
    {
        var points = new List<Point>();
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));

        scatterChartConfig = scatterChartConfig ?? new ScatterChartConfig
        {
            CanvasId = "myFirstScatterChart",
            Options = new ScatterConfigOptions
            {
                Title = new OptionsTitle {Display = true, Text = "Scatter Chart"},
                Responsive = true
            },
            Data = new ScatterConfigData
            {
                Datasets = new List<ScatterConfigDataset>
                {
                    new ScatterConfigDataset
                    {
                        Label = "First dataset",
                        BorderColor = "rgba(80,80,235,0.6)",
                        BackgroundColor = "rgba(80,80,235,0.6)",
                        BorderWidth = 3,
                        PointRadius = 5,
                        PointHitRadius = 5,
                        Data = points
                    },
    //new ScatterConfigDataset
    //{
    //    Label = "Second dataset",
    //    BorderColor = "rgba(80,234,80,0.6)",
    //    BackgroundColor = "rgba(80,234,80,0.6)",
    //    BorderWidth = 3,
    //    PointRadius = 5,
    //    PointHitRadius = 5,
    //    Data = new List<Point>
    //    {
    //        PointUtil.NewRandPoint(-10, 10, -10, 10),
    //        PointUtil.NewRandPoint(-10, 10, -10, 10),
    //        PointUtil.NewRandPoint(-10, 10, -10, 10),
    //        PointUtil.NewRandPoint(-10, 10, -10, 10)
    //    }
    //},
    //new ScatterConfigDataset
    //{
    //    Label = "Third dataset",
    //    BorderColor = "rgba(234,80,80,0.6)",
    //    BackgroundColor = "rgba(234,80,80,0.6)",
    //    BorderWidth = 3,
    //    PointRadius = 5,
    //    PointHitRadius = 5,
    //    Data = new List<Point>
    //    {
    //        PointUtil.NewRandPoint(-10, 10, -10, 10),
    //        PointUtil.NewRandPoint(-10, 10, -10, 10),
    //        PointUtil.NewRandPoint(-10, 10, -10, 10),
    //        PointUtil.NewRandPoint(-10, 10, -10, 10)
    //    }
    //}
                }
            }
        };
    }

    protected override void OnAfterRender()
    {
        Console.WriteLine("OnAfterRender");
        scatterChartJs.Reload();
    }

    public void UpdateChart()
    {
    //Update existing dataset

        scatterChartConfig.Data.Datasets.ForEach(dataset => { dataset.Data.Add(PointUtil.NewRandPoint(-10, 10, -10, 10)); });
    //scatterChartConfig.Data.Datasets.ForEach(dataset => { dataset.Data.Add(new Point(3,4)); });

        scatterChartJs.Reload();
    }

    protected override Task OnInitAsync()
    {
        Console.WriteLine("OnInitAsync");
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParameterSet");
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParameterSetAsync");
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    protected override Task OnAfterRenderAsync()
    {
        Console.WriteLine("OnAfterRenderAsync");
        return Task.CompletedTask;
    }

}