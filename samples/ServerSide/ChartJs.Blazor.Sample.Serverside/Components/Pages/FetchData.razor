@page "/fetchdata"
@using ChartJs.Blazor.Sample.Serverside.Services
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart

@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Line Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsLineChart ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />


@functions {
    WeatherForecast[] forecasts;

    public LineChartConfig lineChartConfig { get; set; }
    ChartJsLineChart lineChartJs;


    protected override void OnInit()
    {
        forecasts = ForecastService.GetForecast(DateTime.Now);

        lineChartConfig = lineChartConfig ?? new LineChartConfig
        {
            CanvasId = "myFirstLineChart",
            Options = new LineChartOptions
            {
                Text = "Sample chart from Blazor",
                Display = true,
                Responsive = true,
                Title = new OptionsTitle { Display = true, Text = "Line Chart" },
                Legend = new Legend
                {
                    Position = LegendPosition.BOTTOM.ToString(),
                    Labels = new Labels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = Mode.nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<Axis>
            {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = ".labelString"
                            }
                        }
                    },
                    yAxes = new List<Axis>
            {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "..label"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = Mode.nearest
                }
            },
            Data = new LineChartData
            {
                Labels = new List<string> { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" },
                Datasets = new List<LineChartDataset>
        {
                    new LineChartDataset
                    {
                        BackgroundColor = "#ff6384",
                        BorderColor = "#ff6384",
                        Label = "# of Votes from blazor",
                        Data = new List<object> {4, 6, 2, 7, 9, 1},
                        Fill = false,
                        BorderWidth = 2,
                        PointRadius = 3,
                        PointBorderWidth = 1
                    }
                }
            }
        };
    }

    protected override void OnAfterRender()
    {
        //lineChartJs.Reload();
    }

    public void UpdateChart()
    {
        //Update existing dataset
        var rand = new Random();
        //lineChartConfig.Data.Labels.Add($"New{DateTime.Now.Second}");

        lineChartConfig.Data.Datasets.ForEach(dataset =>
        {
            var next = rand.Next(dataset.Data.Select(Convert.ToInt32).Max());
            dataset.Data[3] = next;
        });
    }

    protected override Task OnInitAsync()
    {
        Console.WriteLine("OnInitAsync");
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParameterSet");
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParameterSetAsync");
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    protected override Task OnAfterRenderAsync()
    {
        Console.WriteLine("OnAfterRenderAsync");
        return Task.CompletedTask;
    }
}
