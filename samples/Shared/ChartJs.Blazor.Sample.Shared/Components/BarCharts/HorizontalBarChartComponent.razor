@using System.ComponentModel
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
<h2>Horizontal Bar Chart</h2>
<div class="row">
    <button class="btn btn-primary" @onclick="OnClick">Update Chart</button>
</div>
<ChartJsBarChart @ref="_barChart"
                 Config="@_barChartConfig"
                 Width="600"
                 Height="300" />

@code {

    // https://github.com/Joelius300/ChartJSBlazor/issues/18
    private ReferenceConverter _referenceConverter = new ReferenceConverter(typeof(ChartJsBarChart));

    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;

    protected override void OnInitialized()
    {

        //Note the constructor argument
        _barChartConfig = new BarConfig(ChartType.HorizontalBar)
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },
                Responsive = true,
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                                new LinearCartesianAxis
                                {
                                    Ticks = new LinearCartesianTicks()
                                    {
                                        AutoSkip = false,
                                        Min = 0 // Otherwise the lowest value in the dataset won't be visible
                                    }
                                }
                            }
                }
            }
        };

        _barChartConfig.Data.Labels.AddRange(new[] { "A", "B", "C", "D" });

        //Note the constructor argument
        _barDataSet = new BarDataset<DoubleWrapper>(ChartType.HorizontalBar)
        {
            Label = "My double dataset",
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderColor = ColorUtil.RandomColorString(),
            BorderWidth = 1
        };

        _barDataSet.AddRange(new double[] { 8, 5, 3, 7 }.Wrap());
        _barChartConfig.Data.Datasets.Add(_barDataSet);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            StateHasChanged();
        }
    }

    private void OnClick()
    {
        var nowSecond = DateTime.Now.Second;
        _barChartConfig.Data.Labels.Add(nowSecond.ToString());
        _barDataSet.Add(new DoubleWrapper(nowSecond));
        _barDataSet.BackgroundColor = _barChartConfig.Data.Labels.Select(l => ColorUtil.RandomColorString()).ToArray();
    }

}