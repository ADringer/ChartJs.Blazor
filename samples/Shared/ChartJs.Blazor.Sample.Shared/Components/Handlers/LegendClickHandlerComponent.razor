@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.Common.Legends.OnClickHandler
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using Newtonsoft.Json

<h1>Legend Item Click Handler</h1>
<h3>Click the legend items</h3>
<h4>Browse the code to see how to register a .Net click handler for legend items.</h4>

<ChartJsPieChart @ref="_doughnutChartJs" Config="@_config" Width="600" Height="300"/>

<textarea	rows="@Rows" 
			@bind-value="@LegendItems"
			@bind-value:event="oninput"
			style="width: 100%; resize: both; height:auto "></textarea>

@code {
	private PieConfig _config;
	private ChartJsPieChart _doughnutChartJs;

	public string LegendItems { get; set; } = "";
	public int Rows { get; set; } = 3;

	protected override void OnInitialized()
	{
		_config = new PieConfig
		{
			Options = new PieOptions(true)
			{
				Title = new OptionsTitle
				{
					Display = true,
					Text = "Sample chart from Blazor"
				},
				Responsive = true,
				Animation = new ArcAnimation
				{
					AnimateRotate = true,
					AnimateScale = true
				},
				Legend = new Legend()
				{
					OnClick = new DotNetInstanceClickHandler(OnLegendClickHandler)
				}
			}
		};

		_config.Data.Labels.AddRange(new[] {"A", "B", "C", "D"});

		var doughnutSet = new PieDataset
		{
			BackgroundColor = new[] {ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
			BorderWidth = 0,
			HoverBackgroundColor = ColorUtil.RandomColorString(),
			HoverBorderColor = ColorUtil.RandomColorString(),
			HoverBorderWidth = 1,
			BorderColor = "#ffffff"
		};

		doughnutSet.Data.AddRange(new double[] {4, 5, 6, 7});
		_config.Data.Datasets.Add(doughnutSet);
	}

	[JSInvokable]
	public void OnLegendClickHandler(object sender, object args)
	{
		LegendItems += JsonConvert.SerializeObject(JsonConvert.DeserializeObject($"{Environment.NewLine}{args}"), Formatting.Indented);
		Rows = Math.Max(3, LegendItems.Split(new[] {Environment.NewLine}, StringSplitOptions.None).Length + 1);
		StateHasChanged();
	}

}